---
defaultPodOptionsStrategy: overwrite
defaultPodOptions:
  automountServiceAccountToken: false
  enableServiceLinks: false
  restartPolicy: Always
  securityContext:
    fsGroup: 953
    fsGroupChangePolicy: OnRootMismatch

controllers:
  postgres-init:
    enabled: true
    type: job
    job:
      backoffLimit: 5
      ttlSecondsAfterFinished: 600
      activeDeadlineSeconds: 300
    containers:
      init-db:
        image:
          repository: ghcr.io/home-operations/postgres-init
          tag: "17.6"
        env: &postgres-env
          - name: INIT_POSTGRES_DBNAME
            value: pdns
          - name: INIT_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_HOST
          - name: INIT_POSTGRES_SUPER_PASS
            valueFrom:
              secretKeyRef:
                name: powerdns-superuser
                key: password
          - name: INIT_POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_USER
          - name: INIT_POSTGRES_PASS
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_PASS

  postgres-schema:
    enabled: true
    type: job
    job:
      backoffLimit: 5
      ttlSecondsAfterFinished: 600
      activeDeadlineSeconds: 300
    containers:
      init:
        image:
          repository: docker.io/library/alpine
          tag: "3.22"
        env: *postgres-env
        command:
          - /bin/ash
          - -c
          - |
            apk add --no-cache postgresql17-client
            until PGPASSWORD="$(INIT_POSTGRES_PASS)" psql -h "$(INIT_POSTGRES_HOST)" -U "$(INIT_POSTGRES_USER)" -d "$(INIT_POSTGRES_DBNAME)" -c '\q'; do
              echo "Waiting for database to be ready..."
              sleep 5
            done
            PGPASSWORD="$(INIT_POSTGRES_PASS)" psql -h $(INIT_POSTGRES_HOST) -U $(INIT_POSTGRES_USER) -d $(INIT_POSTGRES_DBNAME) -f /opt/db-schema/schema.sql

  main:
    enabled: true
    type: deployment
    replicas: 2
    strategy: RollingUpdate
    rollingUpdate:
      unavailable: 50%
      surge: 50%
    revisionHistoryLimit: 2
    containers:
      dns:
        ports:
          - name: dns-tcp
            containerPort: 5353
            protocol: TCP
          - name: dns-udp
            containerPort: 5353
            protocol: UDP
          - name: webserver
            containerPort: 8081
            protocol: TCP
        image:
          repository: docker.io/powerdns/pdns-auth-49
          tag: "4.9.8"
          pullPolicy: "IfNotPresent"
        args:
          - --no-config
          - --launch=gpgsql
          - --autosecondary=yes
          - --config-name=as-1
          - --local-address=0.0.0.0
          - --local-port=5353
          - --loglevel=6
          - --query-logging=yes
          - --version-string=powerdns
          - --webserver-loglevel=normal
          - --webserver-allow-from=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,127.0.0.1/32
          - --webserver-password=$(PDNS_AUTH_WEB_KEY)
          - --webserver-address=0.0.0.0
          - --webserver-port=8081
          - --webserver=yes
          - --api=yes
          - --gpgsql-port=5432
          - --gpgsql-dbname=pdns
          - --api-key=$(PDNS_AUTH_API_KEY)
          - --gpgsql-user=$(POSTGRES_USER)
          - --gpgsql-password=$(POSTGRES_PASS)
          - --gpgsql-host=$(POSTGRES_HOST)

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
            add:
              - CAP_NET_RAW
              - CAP_NET_BIND_SERVICE
        env:
          - name: CI_JOB_ID # Useful for rolling the pod using a pipeline execution process
            valueFrom:
              secretKeyRef:
                name: as-secrets
                key: ci-job-id
          - name: PDNS_AUTH_WEB_KEY
            valueFrom:
              secretKeyRef:
                name: as-secrets
                key: key
          - name: PDNS_AUTH_API_KEY
            valueFrom:
              secretKeyRef:
                name: as-secrets
                key: api-key
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_USER
          - name: POSTGRES_PASS
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_PASS
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: pdns-db-creds
                key: POSTGRES_HOST
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1Gi
        lifecycle: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
    initContainers: {}

service:
  dns:
    enabled: true
    controller: main
    primary: true
    type: LoadBalancer
    ports:
      tcp:
        enabled: true
        port: 53
        protocol: TCP
        targetPort: dns-tcp
      udp:
        enabled: true
        primary: false
        port: 53
        protocol: UDP
        targetPort: dns-udp
  api:
    enabled: true
    controller: main
    primary: true
    type: ClusterIP
    ports:
      http:
        enabled: true
        port: 80
        protocol: TCP
        targetPort: webserver

route:
  api:
    enabled: true
    kind: HTTPRoute
    parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: gwapi
        namespace: default
        sectionName: https-cloud
    hostnames:
      - pdns.cloud.danmanners.com
    rules:
      - backendRefs:
          - name: powerdns-api
            port: 80
        matches:
          - path:
              type: PathPrefix
              value: /

configMaps:
  db-schema:
    enabled: true
    annotations:
      source: "https://doc.powerdns.com/authoritative/backends/generic-postgresql.html#default-schema"
    data:
      schema.sql: |
        CREATE TABLE domains (
          id                    SERIAL PRIMARY KEY,
          name                  VARCHAR(255) NOT NULL,
          master                VARCHAR(128) DEFAULT NULL,
          last_check            INT DEFAULT NULL,
          type                  TEXT NOT NULL,
          notified_serial       BIGINT DEFAULT NULL,
          account               VARCHAR(40) DEFAULT NULL,
          options               TEXT DEFAULT NULL,
          catalog               TEXT DEFAULT NULL,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );

        CREATE UNIQUE INDEX name_index ON domains(name);
        CREATE INDEX catalog_idx ON domains(catalog);


        CREATE TABLE records (
          id                    BIGSERIAL PRIMARY KEY,
          domain_id             INT DEFAULT NULL,
          name                  VARCHAR(255) DEFAULT NULL,
          type                  VARCHAR(10) DEFAULT NULL,
          content               VARCHAR(65535) DEFAULT NULL,
          ttl                   INT DEFAULT NULL,
          prio                  INT DEFAULT NULL,
          disabled              BOOL DEFAULT 'f',
          ordername             VARCHAR(255),
          auth                  BOOL DEFAULT 't',
          CONSTRAINT domain_exists
          FOREIGN KEY(domain_id) REFERENCES domains(id)
          ON DELETE CASCADE,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );

        CREATE INDEX rec_name_index ON records(name);
        CREATE INDEX nametype_index ON records(name,type);
        CREATE INDEX domain_id ON records(domain_id);
        CREATE INDEX recordorder ON records (domain_id, ordername text_pattern_ops);


        CREATE TABLE supermasters (
          ip                    INET NOT NULL,
          nameserver            VARCHAR(255) NOT NULL,
          account               VARCHAR(40) NOT NULL,
          PRIMARY KEY(ip, nameserver)
        );


        CREATE TABLE comments (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT NOT NULL,
          name                  VARCHAR(255) NOT NULL,
          type                  VARCHAR(10) NOT NULL,
          modified_at           INT NOT NULL,
          account               VARCHAR(40) DEFAULT NULL,
          comment               VARCHAR(65535) NOT NULL,
          CONSTRAINT domain_exists
          FOREIGN KEY(domain_id) REFERENCES domains(id)
          ON DELETE CASCADE,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );

        CREATE INDEX comments_domain_id_idx ON comments (domain_id);
        CREATE INDEX comments_name_type_idx ON comments (name, type);
        CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);


        CREATE TABLE domainmetadata (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
          kind                  VARCHAR(32),
          content               TEXT
        );

        CREATE INDEX domainidmetaindex ON domainmetadata(domain_id);


        CREATE TABLE cryptokeys (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
          flags                 INT NOT NULL,
          active                BOOL,
          published             BOOL DEFAULT TRUE,
          content               TEXT
        );

        CREATE INDEX domainidindex ON cryptokeys(domain_id);


        CREATE TABLE tsigkeys (
          id                    SERIAL PRIMARY KEY,
          name                  VARCHAR(255),
          algorithm             VARCHAR(50),
          secret                VARCHAR(255),
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );

        CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);

# rawResources:
#   cert:
#     enabled: true
#     apiVersion: cert-manager.io/v1
#     kind: Certificate
#     spec:
#       spec:
#         secretName: powerdns-tls-secret
#         privateKey:
#           algorithm: RSA
#           size: 2048
#         usages:
#           - digital signature
#           - key encipherment
#           - server auth
#           - client auth
#         dnsNames:
#           - pdns.cloud.danmanners.com
#         issuerRef:
#           name: letsencrypt-dns01
#           kind: ClusterIssuer
#         secretTemplate:
#           annotations:
#             reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
#             reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: default
#             reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"

persistence:
  schema:
    enabled: true
    type: configMap
    name: powerdns
    advancedMounts:
      postgres-schema:
        init:
          - path: /opt/db-schema/schema.sql
            readOnly: true
            mountPropagation: None
            subPath: schema.sql
