global:
  enabled: true
  namespace: openbao
  tlsDisable: false
  # -- Create PodSecurityPolicy for pods
  psp:
    enable: false
  serverTelemetry:
    # -- Enable integration with the Prometheus Operator
    # See the top level serverTelemetry section below before enabling this feature.
    prometheusOperator: false

injector:
  enabled: "false"

server:
  enabled: true
  image:
    registry: "quay.io"
    repository: "openbao/openbao"
    tag: "2.2.0"
    pullPolicy: IfNotPresent
  updateStrategyType: "OnDelete"
  logLevel: ""
  logFormat: ""
  setHostnameAsFQDN: true
  resources: {}

  # Ingress allows ingress services to be created to allow external access
  # from Kubernetes to access OpenBao pods.
  # If deployment is on OpenShift, the following block is ignored.
  # In order to expose the service, use the route section below
  ingress:
    enabled: false

  authDelegator:
    enabled: true

  readinessProbe:
    enabled: true
    port: 8200
    failureThreshold: 2
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  livenessProbe:
    enabled: false
    path: "/v1/sys/health?standbyok=true"
    port: 8200
    failureThreshold: 2
    initialDelaySeconds: 60
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3

  terminationGracePeriodSeconds: 10
  preStopSleepSeconds: 5
  # volumes is a list of volumes made available to all containers. These are rendered
  # via toYaml rather than pre-processed like the extraVolumes value.
  # The purpose is to make it easy to share volumes between containers.
  volumes: null

  networkPolicy:
    enabled: false
    ingress:
    - from:
      - namespaceSelector: {}
      ports:
      - port: 8200
        protocol: TCP
      - port: 8201
        protocol: TCP

  service:
    enabled: true
    active:
      enabled: true
    standby:
      enabled: true
    instanceSelector:
      enabled: true
    # Configures the service type for the main OpenBao service.  Can be ClusterIP
    # or NodePort.
    # type: ClusterIP

    # Do not wait for pods to be ready before including them in the services'
    # targets. Does not apply to the headless service, which is used for
    # cluster-internal communication.
    publishNotReadyAddresses: true

    # The externalTrafficPolicy can be set to either Cluster or Local
    # and is only valid for LoadBalancer and NodePort service types.
    # The default value is Cluster.
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-traffic-policy
    externalTrafficPolicy: Cluster

    port: 8200
    targetPort: 8200

  # This configures the OpenBao Statefulset to create a PVC for data
  # storage when using the file or raft backend storage engines.
  # See https://openbao.org/docs/configuration/storage to know more
  dataStorage:
    enabled: true
    size: 20Gi
    mountPath: "/openbao/data"
    storageClass: cephfs-retain
    accessMode: ReadWriteOnce

  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain

  auditStorage:
    enabled: true
    size: 10Gi
    mountPath: "/openbao/audit"
    storageClass: cephfs-retain
    accessMode: ReadWriteOnce

  standalone:
    enabled: false

  # Run OpenBao in "HA" mode. There are no storage requirements unless the audit log
  # persistence is required.  In HA mode OpenBao will configure itself to use Consul
  # for its storage backend.  The default configuration provided will work the Consul
  # Helm project by default.  It is possible to manually configure OpenBao to use a
  # different HA backend.
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true

        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/userconfig/tls-server/tls.crt"
          tls_key_file = "/vault/userconfig/tls-server/tls.key"
        }

        storage "raft" {
          path = "/openbao/data"
        }

        service_registration "kubernetes" {}

  # Definition of the serviceAccount used to run Vault.
  # These options are also used when using an external OpenBao server to validate
  # Kubernetes tokens.
  serviceAccount:
    create: true
    name: ""
    # Create a Secret API object to store a non-expiring token for the service account.
    # Prior to v1.24.0, Kubernetes used to generate this secret for each service account by default.
    # Kubernetes now recommends using short-lived tokens from the TokenRequest API or projected volumes instead if possible.
    # For more details, see https://kubernetes.io/docs/concepts/configuration/secret/#service-account-token-secrets
    # serviceAccount.create must be equal to 'true' in order to use this feature.
    createSecret: false
    # Enable or disable a service account role binding with the permissions required for
    # OpenBao's Kubernetes service_registration config option.
    # See https://openbao.org/docs/configuration/service-registration/kubernetes
    serviceDiscovery:
      enabled: true

  # Settings for the statefulSet used to run OpenBao.
  statefulSet:
    annotations: {}

ui:
  enabled: true
  publishNotReadyAddresses: true
  activeOpenbaoPodOnly: false
  serviceType: "ClusterIP"
  serviceNodePort: null
  externalPort: 8200
  targetPort: 8200

  # The externalTrafficPolicy can be set to either Cluster or Local
  # and is only valid for LoadBalancer and NodePort service types.
  # The default value is Cluster.
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-traffic-policy
  externalTrafficPolicy: Cluster

# secrets-store-csi-driver-provider-vault
csi:
  enabled: false

serverTelemetry:
  serviceMonitor:
    enabled: false
  prometheusRules:
    enabled: false
