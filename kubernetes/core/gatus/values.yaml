---
defaultPodOptions:
  automountServiceAccountToken: true
  enableServiceLinks: true
  restartPolicy: Always
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch

controllers:
  main:
    enabled: true
    type: deployment
    replicas: 1
    revisionHistoryLimit: 1
    annotations:
      reloader.stakater.com/auto: "true"
    serviceAccount:
      name: gatus
    containers:
      core:
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
        image:
          repository: ghcr.io/twin/gatus
          tag: "latest"
          pullPolicy: "IfNotPresent"
        env:
          GATUS_CONFIG_PATH: /config
          GATUS_DELAY_START_SECONDS: 5
          GATUS_WEB_PORT: &port 80
          TZ: America/New_York
        probes:
          liveness: &probes
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /health
                port: *port
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness: *probes
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
        resources:
          limits:
            cpu: 1500m
            memory: 2Gi
          requests:
            cpu: 500m
      sidecar:
        image:
          repository: ghcr.io/home-operations/gatus-sidecar
          tag: "latest"
          pullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
        args:
          - --auto-httproute=true
          - --output=/config/gatus-sidecar.yaml
        resources:
          requests:
            cpu: 20m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 256Mi

service:
  core:
    enabled: true
    controller: main
    primary: true
    type: ClusterIP
    ports:
      core:
        enabled: true
        port: 80
        targetPort: 80
        protocol: TCP
  extname:
    enabled: true
    primary: false
    controller: main
    type: ExternalName
    externalName: unifi-home.homelab.danmanners.com
    ports: {}
    annotations:
      external-dns.alpha.kubernetes.io/hostname: status.cloud.danmanners.com
      external-dns.alpha.kubernetes.io/ttl: "300"

serviceAccount:
  gatus:
    enabled: true

rbac:
  roles:
    gatus:
      enabled: true
      type: ClusterRole
      rules:
        - apiGroups: [""]
          resources: ["services"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["networking.k8s.io"]
          resources: ["ingresses"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["gateway.networking.k8s.io"]
          resources: ["httproutes", "gateways"]
          verbs: ["get", "list", "watch"]
  bindings:
    gatus:
      enabled: true
      type: ClusterRoleBinding
      roleRef:
        identifier: gatus
      subjects:
        - identifier: gatus

route:
  core:
    enabled: true
    kind: HTTPRoute
    annotations:
      external-dns.alpha.kubernetes.io/controller: "false"
      gatus.home-operations.com/enabled: "false"
    parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: gwapi
        namespace: default
        sectionName: https-cloud
    hostnames:
      - status.cloud.danmanners.com
    rules:
      - backendRefs:
          - name: gatus-core
            port: 80
            weight: 1
        matches:
          - path:
              type: PathPrefix
              value: /
        timeouts:
          backendRequest: 0s
          request: 0s

persistence:
  config:
    type: emptyDir
  config-file:
    type: configMap
    name: "gatus-configmap"
    globalMounts:
      - path: /config/config.yaml
        subPath: config.yaml
  db:
    enabled: true
    type: persistentVolumeClaim
    storageClass: ceph-block-retain
    accessMode: ReadWriteOnce
    size: 4Gi
    retain: true
    globalMounts:
      - path: /database/
        readOnly: false
