---
defaultPodOptionsStrategy: overwrite
defaultPodOptions:
  automountServiceAccountToken: false
  enableServiceLinks: false
  restartPolicy: Always
  securityContext:
    fsGroup: 953
    fsGroupChangePolicy: OnRootMismatch

controllers:
  postgres-init:
    enabled: true
    type: job
    job:
      backoffLimit: 5
      ttlSecondsAfterFinished: 600
      activeDeadlineSeconds: 300
    containers:
      init-db:
        image:
          repository: ghcr.io/home-operations/postgres-init
          tag: "17.6"
        env: &postgres-env
          - name: INIT_POSTGRES_DBNAME
            value: keycloak
          - name: INIT_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_HOST
          - name: INIT_POSTGRES_SUPER_PASS
            valueFrom:
              secretKeyRef:
                name: db-superuser
                key: password
          - name: INIT_POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_USER
          - name: INIT_POSTGRES_PASS
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_PASS

  main:
    enabled: true
    type: deployment
    replicas: 2
    strategy: RollingUpdate
    rollingUpdate:
      unavailable: 50%
      surge: 50%
    revisionHistoryLimit: 2
    initContainers:
      wait-for-db:
        image:
          repository: docker.io/library/busybox
          tag: "1.37"
        command:
          - /bin/sh
          - -c
          - |
            until nc -z $(POSTGRES_HOST) 5432; do
            echo "Waiting for database to be ready..."
            sleep 5
            done
            echo "Database is ready!"
        env:
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_HOST
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"
    containers:
      keycloak:
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
        image:
          repository: quay.io/keycloak/keycloak
          tag: "26.2.4"
          pullPolicy: "IfNotPresent"
        args:
          - start
          - --http-port=8080
          - --http-enabled=true
          - --https-port=8443
          - --https-certificate-file=/etc/x509/https/tls.crt
          - --https-certificate-key-file=/etc/x509/https/tls.key
          - --db-url-host=$(DB_HOST)
          - --hostname-strict=false
        securityContext:
          allowPrivilegeEscalation: false
          # capabilities:
          #   drop:
          #   - ALL
          #   add:
          #   - CAP_NET_RAW
          #   - CAP_NET_BIND_SERVICE
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_HOST
          - name: KC_BOOTSTRAP_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-superuser-secret
                key: password
          - name: KC_DB
            value: postgres # Tell Keycloak to use PostgreSQL
          - name: KC_DB_URL_PORT
            value: "5432"
          - name: KC_DB_URL_DATABASE
            value: keycloak
          - name: KC_DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_USER
          - name: KC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-db-creds
                key: POSTGRES_PASS
          - name: KC_PROXY_HEADERS
            value: "xforwarded"
          - name: KC_HTTP_ENABLED
            value: "true"
          - name: KC_BOOTSTRAP_ADMIN_USERNAME
            value: admin
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1Gi
        probes:
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /admin/master/console/
                port: 8080
              initialDelaySeconds: 30
              periodSeconds: 10
        lifecycle: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File

service:
  core:
    enabled: true
    controller: main
    primary: true
    type: ClusterIP
    ports:
      http:
        enabled: true
        port: 80
        targetPort: http
        protocol: TCP
      https:
        enabled: true
        port: 443
        targetPort: https
        protocol: TCP

route:
  cloud:
    enabled: true
    kind: HTTPRoute
    annotations:
      external-dns.alpha.kubernetes.io/hostname: keycloak.cloud.danmanners.com
      external-dns.alpha.kubernetes.io/target: unifi-home.homelab.danmanners.com
      external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
      external-dns.alpha.kubernetes.io/ttl: "300"
    parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: gwapi
        namespace: default
        sectionName: https-cloud
    hostnames:
      - keycloak.cloud.danmanners.com
    rules:
      - backendRefs:
          - name: keycloak
            port: 80
            weight: 1
        matches:
          - path:
              type: PathPrefix
              value: /
        timeouts:
          backendRequest: 0s
          request: 0s

rawResources:
  tls:
    enabled: true
    apiVersion: cert-manager.io/v1
    kind: Certificate
    spec:
      spec:
        secretName: keycloak-tls-cert
        duration: 1128h # 47 days
        renewBefore: 168h # 7 days
        commonName: keycloak.cloud.danmanners.com
        dnsNames:
          - keycloak.cloud.danmanners.com
        issuerRef:
          name: letsencrypt-dns01
          kind: ClusterIssuer
          group: cert-manager.io
        usages:
          - server auth
          - client auth

persistence:
  certs:
    enabled: true
    type: secret
    name: keycloak-tls-cert
    advancedMounts:
      main:
        keycloak:
          - path: /etc/x509/https
            mountPropagation: None
            readOnly: true
